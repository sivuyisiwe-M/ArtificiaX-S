<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login / Signup - Ubuntu Plug</title>
  
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #f84f74, #0212a8);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      background: #fff;
      border-radius: 12px;
      width: 350px;
      padding: 2rem;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    }

    .tabs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1.5rem;
      border-radius: 999px;
      background-color: #f1f1f1;
    }

    .tab {
      width: 50%;
      text-align: center;
      padding: 0.5rem;
      cursor: pointer;
      border-radius: 999px;
      font-weight: bold;
      transition: all 0.3s ease;
    }

    .tab.active {
      background: linear-gradient(to right, #004e92, #000428);
      color: #fff;
    }

    form {
      display: flex;
      flex-direction: column;
    }

    input, select {
      padding: 0.75rem;
      border: 1px solid #ccc;
      border-radius: 8px;
      margin-bottom: 1rem;
      outline: none;
      font-size: 1rem;
    }

    input:focus, select:focus {
      border-color: #004e92;
      box-shadow: 0 0 0 2px rgba(0, 78, 146, 0.1);
    }

    a {
      font-size: 0.85rem;
      color: #004e92;
      text-decoration: none;
      margin-bottom: 1rem;
    }

    button {
      background: linear-gradient(to right, #004e92, #000428);
      color: #fff;
      padding: 0.75rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.3s ease;
    }

    button:hover {
      opacity: 0.9;
    }

    .footer-text {
      text-align: center;
      margin-top: 1rem;
      font-size: 0.85rem;
    }

    .footer-text a {
      color: #004e92;
      text-decoration: none;
    }
    
    .error-message {
      color: #e74c3c;
      font-size: 0.8rem;
      margin-top: -0.5rem;
      margin-bottom: 0.5rem;
      display: none;
    }
    
    .loading {
      display: none;
      text-align: center;
      margin-top: 0.5rem;
    }
    
    .loading::after {
      content: "";
      display: inline-block;
      width: 1rem;
      height: 1rem;
      border: 2px solid rgba(0, 78, 146, 0.3);
      border-radius: 50%;
      border-top-color: #004e92;
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .visible {
      display: block;
    }
  </style>
</head>

<body>
  <div class="container">
    <h2 style="text-align: center;">Welcome to Ubuntu Plug</h2>
    <div class="tabs">
      <div class="tab active" id="login-tab">Login</div>
      <div class="tab" id="signup-tab">Signup</div>
    </div>

    <!-- Login Form -->
    <form id="login-form" style="display: flex;">
      <input type="email" placeholder="Email Address" id="login-email" required />
      <div class="error-message" id="login-email-error"></div>
      
      <input type="password" placeholder="Password" id="login-password" required />
      <div class="error-message" id="login-password-error"></div>
      
      <select id="login-role" required>
        <option value="">Select Role</option>
        <option value="user">Job Seeker/User</option>
        <option value="recruiter">Recruiter/Employer</option>
      </select>
      <div class="error-message" id="login-role-error"></div>
      
      <a href="#" id="forgot-password">Forgot password?</a>
      <button type="submit">Login</button>
      <div class="loading" id="login-loading"></div>
      <div class="error-message" id="login-general-error"></div>
      
      <div class="footer-text">
        Not a member? <a href="#" id="switch-to-signup">Signup now</a>
      </div>
    </form>

    <!-- Signup Form -->
    <form id="signup-form" style="display: none;">
      <input type="text" placeholder="Full Name" id="signup-name" required />
      <div class="error-message" id="signup-name-error"></div>
      
      <input type="email" placeholder="Email Address" id="signup-email" required />
      <div class="error-message" id="signup-email-error"></div>
      
      <input type="password" placeholder="Password" id="signup-password" required />
      <div class="error-message" id="signup-password-error"></div>
      
      <select id="signup-role" required>
        <option value="">Register as</option>
        <option value="user">Candidate/User</option>
        <option value="recruiter">Recruiter/Employer</option>
      </select>
      <div class="error-message" id="signup-role-error"></div>
      
      <button type="submit">Signup</button>
      <div class="loading" id="signup-loading"></div>
      <div class="error-message" id="signup-general-error"></div>
      
      <div class="footer-text">
        Already have an account? <a href="#" id="switch-to-login">Login</a>
      </div>
    </form>
  </div>

  <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

<script>
  // Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyAQDF5RRmqx3hN8v1D91KpOxM12DtQnzyk",
    authDomain: "ubuntuplug.firebaseapp.com",
    databaseURL: "https://ubuntuplug-default-rtdb.firebaseio.com",
    projectId: "ubuntuplug",
    storageBucket: "ubuntuplug.firebasestorage.app",
    messagingSenderId: "887406432080",
    appId: "1:887406432080:web:108e0de9c61d13f418a655",
    measurementId: "G-2J53SZ2K0N"
  };

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const auth = firebase.auth();
  const db = firebase.firestore();

  // DOM Elements
  const loginForm = document.getElementById('login-form');
  const signupForm = document.getElementById('signup-form');
  const loginEmail = document.getElementById('login-email');
  const loginPassword = document.getElementById('login-password');
  const loginRole = document.getElementById('login-role');
  const signupName = document.getElementById('signup-name');
  const signupEmail = document.getElementById('signup-email');
  const signupPassword = document.getElementById('signup-password');
  const signupRole = document.getElementById('signup-role');
  const loginLoading = document.getElementById('login-loading');
  const signupLoading = document.getElementById('signup-loading');
  const loginGeneralError = document.getElementById('login-general-error');
  const signupGeneralError = document.getElementById('signup-general-error');

  // Tab switching
  function switchTab(tab) {
    if (tab === 'login') {
      document.getElementById('login-tab').classList.add('active');
      document.getElementById('signup-tab').classList.remove('active');
      loginForm.style.display = 'flex';
      signupForm.style.display = 'none';
      // Clear any existing errors
      hideAllErrors();
    } else {
      document.getElementById('signup-tab').classList.add('active');
      document.getElementById('login-tab').classList.remove('active');
      signupForm.style.display = 'flex';
      loginForm.style.display = 'none';
      // Clear any existing errors
      hideAllErrors();
    }
  }

  // Helper function to hide all error messages
  function hideAllErrors() {
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(element => {
      element.style.display = 'none';
      element.textContent = '';
    });
  }

  // Helper function to show error
  function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }
  }

  // Event listeners for tab switching
  document.getElementById('login-tab').addEventListener('click', () => switchTab('login'));
  document.getElementById('signup-tab').addEventListener('click', () => switchTab('signup'));
  document.getElementById('switch-to-signup').addEventListener('click', (e) => {
    e.preventDefault();
    switchTab('signup');
  });
  document.getElementById('switch-to-login').addEventListener('click', (e) => {
    e.preventDefault();
    switchTab('login');
  });

  // Form validation function
  function validateForm(formType) {
    let isValid = true;
    hideAllErrors();

    if (formType === 'login') {
      // Validate email
      if (!loginEmail.value.trim()) {
        showError('login-email-error', 'Email is required');
        isValid = false;
      } else if (!/\S+@\S+\.\S+/.test(loginEmail.value)) {
        showError('login-email-error', 'Please enter a valid email address');
        isValid = false;
      }

      // Validate password
      if (!loginPassword.value) {
        showError('login-password-error', 'Password is required');
        isValid = false;
      }

      // Validate role
      if (!loginRole.value) {
        showError('login-role-error', 'Please select your role');
        isValid = false;
      }
    } else if (formType === 'signup') {
      // Validate name
      if (!signupName.value.trim()) {
        showError('signup-name-error', 'Full name is required');
        isValid = false;
      }

      // Validate email
      if (!signupEmail.value.trim()) {
        showError('signup-email-error', 'Email is required');
        isValid = false;
      } else if (!/\S+@\S+\.\S+/.test(signupEmail.value)) {
        showError('signup-email-error', 'Please enter a valid email address');
        isValid = false;
      }

      // Validate password
      if (!signupPassword.value) {
        showError('signup-password-error', 'Password is required');
        isValid = false;
      } else if (signupPassword.value.length < 6) {
        showError('signup-password-error', 'Password must be at least 6 characters');
        isValid = false;
      }

      // Validate role
      if (!signupRole.value) {
        showError('signup-role-error', 'Please select your role');
        isValid = false;
      }
    }

    return isValid;
  }

  // Handle Signup
  signupForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate form
    if (!validateForm('signup')) {
      return;
    }

    // Show loading indicator
    signupLoading.style.display = 'block';
    
    try {
      const fullName = signupName.value.trim();
      const email = signupEmail.value.trim();
      const password = signupPassword.value;
      const role = signupRole.value;
      
      // Create user in Firebase Authentication
      const userCredential = await auth.createUserWithEmailAndPassword(email, password);
      const userId = userCredential.user.uid;
      const timestamp = new Date().toISOString();

      // Base user data
      const userData = {
        fullName,
        email,
        role,
        createdAt: timestamp,
        lastLogin: timestamp,
        profileComplete: false
      };

      // Create user document in the appropriate collection based on role
      if (role === 'user') {
        await db.collection('jobSeeker').doc(userId).set({
          ...userData,
          skills: [],
          education: [],
          experience: [],
          appliedJobs: {}
        });
        // Redirect to opportunity page
        window.location.href = 'opportunity.html';
      } else if (role === 'recruiter') {
        await db.collection('recruiterDB').doc(userId).set({
          ...userData,
          companyName: "",
          contactPerson: fullName,
          companySize: "",
          industry: "",
          location: "",
          description: "",
          website: "",
          postedJobs: {}
        });
        // Redirect to recruiter page
        window.location.href = 'recruiter.html';
      }
    } catch (error) {
      console.error("Signup error:", error);
      showError('signup-general-error', error.message || "Failed to create account. Please try again.");
      signupLoading.style.display = 'none';
    }
  });

  // Handle Login
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Validate form
    if (!validateForm('login')) {
      return;
    }

    // Show loading indicator
    loginLoading.style.display = 'block';
    
    try {
      const email = loginEmail.value.trim();
      const password = loginPassword.value;
      const role = loginRole.value;

      // Sign in with Firebase Auth
      const userCredential = await auth.signInWithEmailAndPassword(email, password);
      const userId = userCredential.user.uid;
      const timestamp = new Date().toISOString();

      // Determine the correct collection based on role
      const collection = role === 'user' ? 'jobSeeker' : 'recruiterDB';

      // Check if user exists in the specified collection
      const userDoc = await db.collection(collection).doc(userId).get();
      
      if (userDoc.exists) {
        // Update last login timestamp
        await db.collection(collection).doc(userId).update({ 
          lastLogin: timestamp 
        });
        
        // Redirect to appropriate page
        window.location.href = role === 'user' ? 'opportunity.html' : 'recruiter.html';
      } else {
        // User doesn't exist in the specified collection
        showError('login-general-error', "No account found with this email and role. Please check your role selection.");
        // Sign out the user since they're in the wrong role
        await auth.signOut();
        loginLoading.style.display = 'none';
      }
    } catch (error) {
      console.error("Login error:", error);
      showError('login-general-error', error.message || "Login failed. Please check your email and password.");
      loginLoading.style.display = 'none';
    }
  });

  // Forgot Password
  document.getElementById('forgot-password').addEventListener('click', async (e) => {
    e.preventDefault();
    
    const email = loginEmail.value.trim();
    if (!email) {
      showError('login-email-error', "Please enter your email to reset your password.");
      return;
    }

    loginLoading.style.display = 'block';
    
    try {
      await auth.sendPasswordResetEmail(email);
      alert("Password reset email sent. Please check your inbox.");
    } catch (error) {
      console.error("Password reset error:", error);
      showError('login-general-error', error.message || "Failed to send password reset email. Please try again.");
    } finally {
      loginLoading.style.display = 'none';
    }
  });

  // Check if user is already logged in
  auth.onAuthStateChanged((user) => {
    if (user) {
      // User is signed in, get their role and redirect
      const checkUserRole = async () => {
        try {
          // Check jobSeeker collection first
          const jobSeekerDoc = await db.collection('jobSeeker').doc(user.uid).get();
          if (jobSeekerDoc.exists) {
            window.location.href = 'opportunity.html';
            return;
          }
          
          // If not in jobSeeker, check recruiterDB
          const recruiterDoc = await db.collection('recruiterDB').doc(user.uid).get();
          if (recruiterDoc.exists) {
            window.location.href = 'recruiter.html';
            return;
          }
          
          // If user isn't in either collection, sign them out
          await auth.signOut();
        } catch (error) {
          console.error("Error checking user role:", error);
        }
      };
      
      checkUserRole();
    }
  });
</script>

</body>
</html>